---
description: 
globs: 
alwaysApply: false
---
# Habby Email Agent 开发指南

本文档用于指导如何在 `habby-email-agent` 项目中快速开发一个新 Agent，涵盖设计流程、目录结构说明与快速开发方法。

---

## ✨ Agent 开发五步法（推荐流程）

1. **定义 Agent 角色与使命**  
   以 LLM 为核心，明确：
   - Agent 的职责、身份定位（能做什么 / 不做什么）
   - 工作流程：以用户为导向的交互流程（如：接收邮件 → 分析请求 → 调用工具 → 格式化回复）

2. **规划 Tools（工具）**
   - 将工作流程中涉及的可操作动作抽象为 Tool（即 LLM 可调用的函数）
   - 每个 Tool 明确定义输入 / 输出，具备函数式封装

3. **规划 Services（业务服务）**
   - 为每个 Tool 提供底层业务逻辑支持（调用外部 API、DynamoDB、S3 等）
   - Service 层应具备清晰接口与职责边界

4. **规划 Habby API 接口**
   - 若服务依赖公司 API，则定义或确认 Habby API 接口格式
   - 可推动接口规范对齐（如 RESTful、鉴权方式、错误码定义）

5. **编写 Prompt**
   - System Prompt：定义 Agent 的能力边界和行为规范
   - User Prompt：用于引导用户请求（如邮件模板、结构化指令等）
   - 使用 `prompt_builder.py` 统一管理

---

## 📁 项目目录结构说明

```plaintext
agents/email-agent/
├── app.py                      # Lambda 入口
├── agent.py                    # Agent 主体，定义 prompt + tool 注册
├── prompt_builder.py           # Prompt 构建器
├── tools_registry.py           # 注册工具函数的列表
├── config/                     # 配置与环境变量
│   └── settings.py
├── tools/                      # 可供 LLM 调用的工具函数
│   └── lambda_client.py
├── services/                   # 业务服务层，封装 API / 业务逻辑
│   ├── habby_api_user_service.py
│   ├── introduction_service.py
│   └── user_service_dynamodb_backup.py
├── clients/                    # 封装外部系统访问，如 habby API 客户端
│   └── habby_api_client.py
├── utils/                      # 公共工具函数
│   ├── logger.py
│   ├── secrets_manager.py
│   ├── response_formatter.py
│   ├── email_templates.py
│   ├── environment.py
│   └── helpers.py
├── tests/                      # 测试代码（单元测试、事件模拟、调试脚本）
│   ├── events/
│   ├── fixtures/
│   └── scripts/
├── docs/                       # 说明文档
├── examples/                   # 示例输入/输出
├── requirements.txt            # 依赖库
└── quick_test_result.json      # 快速测试结果（可选，调试用）
